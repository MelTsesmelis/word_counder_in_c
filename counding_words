#include <stdio.h>
#include <stdlib.h>

//declare function, their implementation is on end
void *counter_words_of_file(); //This function is to count the words of a file
int *word_seperators();//this function is to check if a character is on words operators (so help us to know when a word start and ends)



//take number of thread and the buffer(so what it has to read)
struct data
{
    char *buffer; //we use the buffer to take the characters 
    int thread_counter; //to save the sum of threads
}

//main -driver function
int main (int argc, char *argv[]){
 printf("I am on counting words\n");
 
 //ininialize threads-array
 pthread_t threads[NTHREADS];
 
 
//use data to take an array for threads 
 data count[NTHREADS];
 
  for (int i = 0; i < NTHREADS; i++)
    {
      /*remember that in it219105.c i used  a pointer array args
      and in second cell i put the buffer to take the characters
      */
      count[i].buffer=argv[2]; //so i take characters
      count[i].thread_counter=i; //i take the number of threads
      pthread_create(&threads[i], NULL, &counter_words_of_file, (void*)&(count[i]));
       
    }
  printf ("After thread creation...\n");

  //wait all threads to complete 
  for (int i = 0; i < NTHREADS; i++){
    pthread_join(threads[i],NULL);
  }
 
  //calculation TO DO 



  
    /*
        permissions is like  
        r-- ->4                 so i want 644 to give rw--w--w-
        -w- ->2
        --x -<1
    */
    int fd;
    if ((fd=open("output.txt",O_WRONLY | O_CREAT | O_APPEND,0644 ))==-1)//we want to write, create (if its not yet) or append that file
    {
        //in case that something goes wrong print a message
        perror("");
        //exit of the program
        exit(1);

    }


    //write to output.txt file  TO DO 
    


return 0;
}
